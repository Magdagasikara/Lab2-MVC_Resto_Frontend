@using Lab2_MVC_Resto_Frontend.Models.ViewModels
@{
    Layout = "_LayoutIFrame";
}
@section metadata {
    <meta name="description" content="Admin's subpage for administration of bookings.">
}
@* idea from https://codepen.io/crezzur/pen/JjXjojR then a lot of help by Chat GPT *@
@model ScheduleVM

<section id="message">
    @{
        // 1. TempData comes from other actions, ViewData from this specific action
        // 2. I use "as string" below so that in case it is not a string, the result will be null without throwing an exception.
        // .ToString() or no conversion could throw an exception.
        string successMessage = ViewData["SuccessMessage"] as string ?? TempData["SuccessMessage"] as string;
        string errorMessage = ViewData["ErrorMessage"] as string ?? TempData["ErrorMessage"] as string;

        if (!string.IsNullOrEmpty(successMessage))
        {
            <div class="alert alert-success">
                @successMessage
            </div>
        }
        else if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger">
                @errorMessage
            </div>
        }
    }
</section>

@{
    var errorFromIndex = ViewData["ErrorMessage"] as string;

    if (string.IsNullOrEmpty(errorFromIndex))
    {
        <section id="booking-add">
            <a asp-controller="Bookings" asp-action="AddBooking" class="btn btn-primary">
                Add a new reservation
            </a>
        </section>

        <div class="table-responsive">
            <table class="table table-striped table-hover table-bordered caption-top">
                <caption>List of current reservations</caption>
                <thead>
                    <tr>
                        <th>Table</th>
                        @for (var time = Model.StartDate; time <= Model.EndDate; time = time.AddMinutes(30))
                        {
                            <th>@time.ToString("dd/MM/yyyy HH:mm")</th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @foreach (var table in Model.Tables)
                    {
                        <tr>
                            <td>Table @table.TableNumber<br> (@table.AmountOfPlaces places)</td>
                            @{
                                var currentTime = Model.StartDate;
                            }
                            @while (currentTime <= Model.EndDate)
                            {
                                var booking = table.Bookings
                                .SingleOrDefault(b =>
                                b.ReservationStart <= currentTime &&
                                b.ReservationEnd > currentTime);

                                if (booking != null)
                                {
                                    // Count amount of 30min-intervals for each booking to be displayed on
                                    // Reservations are being found only once in the logic and should be displayed until the ReservationEnd
                                    // "currentTime" is used below instead of ReservationStart so that I can show reservations
                                    // that started earlier than shown in the schedule and still with correct ReservationEnd
                                    var durationInMinutes = (booking.ReservationEnd - currentTime).TotalMinutes;
                                    var colspan = (int)(durationInMinutes / 30); // Antal halvtimmar

                                    // One cell for the whole booking
                                    <td colspan="@colspan">
                                        <div class="booking">
                                            <div class="booking-details">
                                                <h3>@booking.Email</h3>
                                                <span>@booking.BookingNumber</span>
                                                <div>Guests: @booking.AmountOfGuests</div>
                                                <div>Time: @booking.ReservationStart.ToString("HH:mm") - @booking.ReservationEnd.ToString("HH:mm")</div>
                                            </div>
                                            <div class="icons">
                                                <a asp-controller="Bookings" asp-action="UpdateBooking" asp-route-bookingNumber=@booking.BookingNumber aria-label="Update booking here">
                                                    <i class="fa-solid fa-pen-to-square" title="Edit this booking?"></i>
                                                </a>
                                                <a href=@Url.Action("RemoveBooking","Bookings",new { bookingNumber= booking.BookingNumber }) aria-label="Delete booking here">
                                                    <i class="fa-solid fa-trash-can" title="Delete this booking?"></i>
                                                </a>
                                            </div>
                                        </div>
                                    </td>

                                    // Set current time to the reservation end time, rounded to half'n'hour
                                    currentTime = booking.ReservationEnd.Date.AddMinutes(Math.Ceiling(booking.ReservationEnd.TimeOfDay.TotalMinutes / 30) * 30);
                                }
                                else
                                {
                                    <td></td>
                                    currentTime = currentTime.AddMinutes(30);
                                }
                            }
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
}
<script>

    // When admin opens the window, the current time should be visible first (i.e. scroll to the current half n hour)

    // window.addEventListener('load', function () {
    //     // Hitta den första kolumnen och dess bredd
    //     const table = document.querySelector('.table-responsive');
    //     const currentTime = new Date();
    //     const startTime = new Date('@Model.StartDate');

    //     // Beräkna hur många halvtimmar vi behöver scrolla
    //     const diffInMinutes = (currentTime - startTime) / (1000 * 60); // Skillnad i minuter
    //     const diffInHalfHours = Math.floor(diffInMinutes / 30); // Antal halvtimmar

    //     // Varje kolumn är en halvtimme, så scrolla till rätt kolumn
    //     const columnWidth = document.querySelector('th').offsetWidth; // Bredden på en kolumn
    //     const scrollPosition = diffInHalfHours * columnWidth; // Hur långt vi ska scrolla
    //     console.log("är här")
    //     // Scrolla till den positionen
    //     table.scrollLeft = scrollPosition;
    // });


</script>
